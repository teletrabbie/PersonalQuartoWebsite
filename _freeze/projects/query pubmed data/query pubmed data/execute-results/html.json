{
  "hash": "5f0b501fa5f77457e126a4ad7c5bd1b0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pubmed mit R abfragen\"\nauthor: \"Christian Franke\"\ndate: \"2024-02-16\"\nimage: \"pubmed.png\"\neditor: \n  markdown: \n    wrap: 72\nfreeze: true\n---\n\n\nIm Rahmen einer Seminararbeit wurden eine Literaturrecherche auf Pubmed\ndurchgeführt. Unterschiedliche Search-String-Kombinationen wurden mit R\nautomatisch ausgeführt. Dadurch haben wir ein Mengengerüst erhalten, um\ndie Bedeutung von Subthemen besser einzuschätzen und unsere eigene\nSuch-Strategie zu optimieren.\n\nDas Poster zu unserer Seminararbeit findet ihr\n[hier](https://teletrabbie.github.io/poster/seminar2.pdf).\n\nDas R-Skript hatte ich erstellt, als ich noch keine Erfahrung mit API\nhatte. Heute würde ich das Skript vermutlich anders (eleganter)\ngestalten und in den nächsten Wochen sicherlich auch als verbesserte\nVariante ausprobieren.\n\n## Vorbereitung\n\nAls erstes wurde die API-Adresse als String nachgebildet mit jeweils\nzwei Begriffen, die im Titel oder im Abstract auf Pubmed gesucht wurden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Paket 'xml2' wurde unter R Version 4.3.2 erstellt\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Paket 'tidyr' wurde unter R Version 4.3.2 erstellt\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(knitr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Paket 'knitr' wurde unter R Version 4.3.2 erstellt\n```\n\n\n:::\n\n```{.r .cell-code}\n# set static values of the url\nurl_part_1 <- \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term=(\"\nurl_part_3 <- \"[Title/Abstract])AND(\"\nurl_part_5 <- \"[Title/Abstract])\"\n\n# empty vector to store the Count-values\nresult_vector <- integer()\nsearch_string_combination_1 <- character()\nsearch_string_combination_2 <- character()\n\n# search-strings\nsearch_string_1 <- c(\n  \"COPD\", \"asthma\", \"diabetes\", \"heart\", \"hypertension\", \"ophthalmology\"\n  #, \"surgery\", \"covid\", \"rehabilitation\", \"chronic\", \"acute\", \"icu\"\n)\nsearch_string_2 <- c(\"telemedicine\",\"telehealth\",\"telemonitoring\", \"remote\")\n```\n:::\n\n\nBis hierhin wurde noch keine Pubmed-Abfrage durchgeführt.\n\n## Abfrage auf Pubmed\n\nIn einem doppelten Loop wurden die Such-String-Kombinationen mit\npaste0() zusammengesetzt, die URL aufgerufen und die Anzahl Treffer\n(\"Count\") extrahiert.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:length(search_string_1)) {\n  for (j in 1:length(search_string_2)) {\n    # define search string\n    url <- paste0(url_part_1, search_string_1[i], url_part_3, search_string_2[j], url_part_5)\n    pubmed_count <- xml_integer(xml_find_all(read_xml(url), \".//Count\"))\n    # safe count values\n    result_vector <- c(result_vector, pubmed_count)\n    search_string_combination_1 <- c(search_string_combination_1, search_string_1[i])\n    search_string_combination_2 <- c(search_string_combination_2, search_string_2[j])\n    }\n  }\n```\n:::\n\n\nSchliesslich kann das Gesamtergebnis als Tabelle ausgegeben werden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_set <- tibble(search_string_combination_1, search_string_combination_2, result_vector) %>%\n  pivot_wider(names_from = \"search_string_combination_2\", values_from = \"result_vector\")\ncolnames(result_set)[1] <- \"Search string combination\"\nkable(result_set)\n```\n\n::: {.cell-output-display}\n\n\n|Search string combination | telemedicine| telehealth| telemonitoring| remote|\n|:-------------------------|------------:|----------:|--------------:|------:|\n|COPD                      |          255|        253|            194|    284|\n|asthma                    |          261|        133|             65|    379|\n|diabetes                  |         1750|        977|            286|   2235|\n|heart                     |         1386|        669|            874|   5569|\n|hypertension              |          601|        346|            297|   1260|\n|ophthalmology             |          525|        119|              4|    263|\n\n\n:::\n:::\n\n\nDer doppelte Loop und die ursprünglichen Pubmed-Abfragen führten zu 205\nunterschiedlichen Such-String-Kombinationen. Bis die Daten geladen\nwurden, dauert es knapp 2 Minuten. Das tönt zwar lange, aber geht\nschneller, als die Suchen manuell durchzuführen. Im Beispiel oben habe\nich die Such-String-Kombinationen nun reduziert, sodass das Deployen\nschneller vonstattengeht.\n\nDennoch sehe ich noch Verbesserungspotential in meinem Skript. Das nehme\nich mir für die nächste Zeit vor...\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}